import os
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import aiohttp
import logging

API_TOKEN = '7741948921:AAEOTurL6xWvh_s_AN4uPrf2IlAh3gjElJg'
ACCUWEATHER_API_KEY = '241QGkWFk7nmAfYRwYLIdMOxy0a8kHgH'
ACCUWEATHER_URL = "https://dataservice.accuweather.com"


# Initialize bot and dispatcher
logging.basicConfig(level=logging.INFO)
dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=API_TOKEN)

class WeatherStates(StatesGroup):
    waiting_for_start = State()
    waiting_for_end = State()
    waiting_for_stops = State()
    waiting_for_interval = State()

def create_interval_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="3 –¥–Ω—è", callback_data="interval_3")
    builder.button(text="5 –¥–Ω–µ–π", callback_data="interval_5")
    builder.button(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish")
    builder.adjust(2, 1)
    return builder.as_markup()

def create_stops_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É", callback_data="add_stop")
    builder.button(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_stops")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(CommandStart())
async def send_welcome(message: Message):
    await message.reply(
        "–Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /weather –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )

@dp.message(Command("help"))
async def send_help(message: Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/weather - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —É–∫–∞–∂–∏—Ç–µ:\n"
        "1. –ù–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞\n"
        "2. –ö–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞\n"
        "3. –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)\n"
        "4. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞"
    )
    await message.reply(help_text)

@dp.message(Command("weather"))
async def weather_start(message: Message, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_start)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ (–≥–æ—Ä–æ–¥ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã):")

@dp.message(WeatherStates.waiting_for_start)
async def process_start_point(message: Message, state: FSMContext):
    await state.update_data(start_point=message.text)
    await state.set_state(WeatherStates.waiting_for_end)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")

@dp.message(WeatherStates.waiting_for_end)
async def process_end_point(message: Message, state: FSMContext):
    await state.update_data(end_point=message.text, stops=[])
    await message.reply("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏?", reply_markup=create_stops_keyboard())

@dp.callback_query(lambda c: c.data == 'add_stop')
async def process_add_stop(callback: CallbackQuery, state: FSMContext):
    await state.set_state(WeatherStates.waiting_for_stops)
    await callback.answer()
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É:")

@dp.message(WeatherStates.waiting_for_stops)
async def process_stop(message: Message, state: FSMContext):
    data = await state.get_data()
    stops = data.get('stops', [])
    stops.append(message.text)
    await state.update_data(stops=stops)
    await message.reply("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=create_stops_keyboard())

@dp.callback_query(lambda c: c.data == 'finish_stops')
async def process_finish_stops(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥–Ω–æ–∑–∞:",
        reply_markup=create_interval_keyboard()
    )

async def get_location_key(city_name, session):
    params = {'apikey': ACCUWEATHER_API_KEY, 'q': city_name}
    async with session.get(f"{ACCUWEATHER_URL}/locations/v1/cities/search", params=params) as response:
        response.raise_for_status()
        data = await response.json()
        if not data:
            raise ValueError(f"–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city_name}")
        return {
            'key': data[0]['Key'],
            'lat': data[0]['GeoPosition']['Latitude'],
            'lon': data[0]['GeoPosition']['Longitude']
        }

async def get_forecast(location_key, days, session):
    params = {'apikey': ACCUWEATHER_API_KEY, 'details': 'true', 'metric': 'true'}
    async with session.get(f"{ACCUWEATHER_URL}/forecasts/v1/daily/{days}day/{location_key}", params=params) as response:
        response.raise_for_status()
        data = await response.json()
        return data['DailyForecasts']

@dp.callback_query(lambda c: c.data.startswith('interval_'))
async def process_interval(callback: CallbackQuery, state: FSMContext):
    interval = int(callback.data.split('_')[1])
    data = await state.get_data()
    weather_data = {}
    points = [data['start_point']] + data.get('stops', []) + [data['end_point']]

    async with aiohttp.ClientSession() as session:
        for point in points:
            try:
                location = await get_location_key(point, session)
                forecast_data = await get_forecast(location['key'], interval, session)

                weather_data[point] = {}
                for daily in forecast_data:
                    date = daily['Date'].split('T')[0]
                    weather_data[point][date] = {
                        'temperature': round((daily['Temperature']['Minimum']['Value'] +
                                              daily['Temperature']['Maximum']['Value']) / 2),
                        'wind': round(daily['Day']['Wind']['Speed']['Value']),
                        'precipitation': daily['Day']['RainProbability']
                    }

            except aiohttp.ClientError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {point}: {e}")
                await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {point}.")
            except ValueError as e:
                await callback.message.answer(f"–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {point}")
            except Exception as e:
                logging.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {point}: {e}")

    if weather_data:
        await send_weather_forecast(callback.from_user.id, weather_data)
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.")

    await callback.answer()
    await state.clear()

async def send_weather_forecast(user_id: int, weather_data: dict):
    forecast_message = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:\n\n"

    for location, forecasts in weather_data.items():
        forecast_message += f"üìç {location}:\n"
        for date, weather in forecasts.items():
            forecast_message += (
                f"  {date}:\n"
                f"  üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}¬∞C\n"
                f"  üí® –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å\n"
                f"  ‚òîÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {weather['precipitation']}%\n\n"
            )

    await bot.send_message(user_id, forecast_message)

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
